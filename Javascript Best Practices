Ternary conditionals

Standard conditional
Simple assignment can take lots of code.

I.e.

var isArthur = false;
var weapon;

if(isArthur)
{
  weapon = "Excalibur";
} else
{
  weapon = "Longsword";
}

Ternary conditional

someCondition ? pickIfTrue: pickIfFalse;

E.g.

var weapon = isArthur ? "Excalibur": "Longsword";

Logic assignment

Logical operators can make code even shorter than ternaries

var armor =
{ addSword(sword){
    this
}}

switch block
alternate way to take action based on value, not just booleans.

E.g.

function Knight (name, regiment)
{
  this.name = name;
  this.regiment = regiment;
  if(regiment == 1)
  {
    this.weapon = "Broadsword";
  }
  else if(regiment == 2)
  {
    this.weapon = "Claymore";
  }
  else if(regiment == 3)
  {
    this.weapon = "Longsword";
  }
}

function knights(name, regiment) {
  this.name = name;
  this.regiment = regiment;
  switch (this.regiment) {
    case 1:
    this.weapon = "Broadsword";
    break;
    case 2:
    this.weapon = "Claymore";
    break;
    case 3:
    this.weapon = "Longsword";
    break;
  }
}

Loop optimization

treasureChest =
{
  goldCoins:10000;
  magicalItem: "Crown Of Speed";
  necklaces: ["ruby","pearl","sapphire","diamond"];
  openLid: function(){
    alert("Creeeeeck");
  }
}

console.log("You've found the following necklaces");
for(var i=0; i < treasureChest.necklaces.length; i++)
{
  console.log(treasureChest.necklaces[i]);
} //inefficient looping Incurs multiple lookups for each step in loop.

Can use "cached values" to save lookups.

var x = treasureChest.length;
for(var i =0; i != x; i++)
{
  console.log(treasureChest.necklaces[i]);
}
Even more change, no more optimization but better organization.

for(var i=0, var x = treasureChest.necklaces.length; i != x; i++)
{
  ...
}

More optimization
var list = treasureChest.necklaces;
for(var i=0, var x = treasureChest.necklaces.length; i != x; i++)
{
  ...
}

Choosing the best loops for arrays.

for loops > for-in loops if goal = reach every index.

for-in includes all properties added externally in prototype.

Script execution

Script placement inside html page effects performance.

Normally browser allowed to make 6 parallell requests at once from server.
script tag halts requests until loading has ended.

Scripts defined in head of page or at start of body tag causes pausing.
Solution, work-intensive scripts should be moved down to bottom of page.
Or, use async tag on script to let rest of page load before script runs.
<script type = "text/javascript" srd="..." async></script>

Short performance tips

Inheritance can help with memory efficiency
Be carefull of loading objects with code that could easily be held elsewhere
(prototypes)

Adding new documents to DOM causes document reflow, this can impact user
performance.

Work around, create document fragment, append to that, then insert entire
document fragment once.

var fragment = document.createFragment();
for(var i=0, x = kotw.length; i < x; i++)
{
  var element = document.createElement("i");
  element.appendChild(document.createTextNode(kotw[i]));
  elist.appendChild(element);
}
Create as few variables as possible (use var as few times as possible);

Efficient choises for string concatenation.
concatenation can work, but there is method that is faster when strings are
defined inside array. Strings in array faster to concatenate using join method.

How to meassure performance

console.time() can be used to meassure time of execution for code.

Setting up timers take time.

Meassuring performance II

Retrieving and using numerical data
Generate numerical data can be manipulated, use Date object.
var rightNow = new Date();
console.log(rightNow);
 +rightNow -> output in miliseconds.
 -> var rightNow = +new Date();
    var endTime = +new Date();
    var elapsedTime = endTime - rightNow;
    console.log(elapsedTime) -> outputs time elapsed in miliseconds
    between endTime and rightNow;

Creating speed test class.

function SpeedTest(testImplement, testParams,repetitions = 10000)
{
  this.testIMplement = testImplement;
  this.testParams = testParams;
  this.repetitions = repetitions;
  this.average = 0;
}

SpeedTest.prototype = {
  startTest: function()
  {
    let beginTime, endTime, sumTimes = 0;
    for(let i =0, x = this.repetitions: i < x; i++)
    {
      beginTime = +new Date();
      this.testImplement(this.testParams);
      endTime = +new Date();
      sumTimes += endTime - beginTime;
    }
    this.average = sumTimes/repetitions;
    return console.log(`Average execution across ${this.repetitions}:
                        ${this.average}`)
  }
}

Careful Comparison

Comparison operators try/catch

=== compares type and contents.

'4' == 4; -> true (type coecion)
'4' === 4; -> false (no type coercion);
true == 1  -> true;
false == 0 -> true;
true === 1 -> false;
false === 0 -> false;

"\n \n \t" == 0 -> true; (slightly weird);

=== comparison should be used when data can have multiple/unknown types.

Verifying class of object.
Check if class has specific constructor/prototype.

instanceof operator used to check class/prototype/constructor.
Used as obj instanceof Constructor . Returns true for any Constructor in
prototype chain of obj.

Exception handling

Exception = run-time error != syntax error.
Javascript has method for identifying/recovering from run-time errors:

try {
  alert(alarm);
}
catch(error)
{
  alert(`U oh...\n ${error}`);
}

catch can be made to act different on different errors.
catch (error)
{
  if( error instanceof ReferenceError) {...}
  if( error instanceof TypeError) {...}
}

Javascript does not pinpoint every error. Can use conditionals and throw
statements to make errors more specific.

try {
  if(list === undefined)
  {
    throw new ReferenceError();
  }
  if((list instanceof Array) === false)
  {
    throw new TypeError();
  }
}
catch( ...)
{
  ...
}

Optionally can add finally block, statements inside finally block always executed
regardless of wheter try block throws or not.
Nesting try/catch blocks allowed.

What not to do.

with statement.

Javascript has keyword with, often expensive to use and ureliable -> often
avoided.

with can be used to create a new lexical scope.
with(drawBridge)
{
  open() -> drawBridge.open();
  close = function()
  {
    ...
  } -> not added as property of drawBridge object, instead added as global
  variable.
}

Goal of with = avoid redundancy (nested object syntax can be shortened
  with the keyword with ).

  castle.keep.drawBridge.... ->
  with(castle.keep.drawBridge)
  {

  }

  better to use variables to cache objects.

  let o = castle.keep.drawBridge

  eval keyword can affect legiblity, ability to debug and performance.

  eval keyword treats string as line of code to evaluate.

  Eval has uses, but those are very limited.

  using eval to to parse JSON data = VERY DANGEROUS.
  json from external sources can contain malliscious scripts aiming at
  code injection. Use json.parse() instead of eval.

Curly braces {} can be left off of single-line statements.

if(isKing)
  weapon = "Excalibur";
else
  weapon = "Longsword";

Bad idea, makes it hard to add new lines of code. Be cool, bracket code.

Number nonsense

Decimals in javascript = problems.
Javascript uses binary floating point values to handle all of its decimal based
operations.
console.log(0.1+0.2) -> 0.30000000000000000000000000000000004 ???????????
console.log(0.1+0.2+0.3) -> 0.6000000000000000000000000000001 ???????????
console.log((0.1+0.2)+0.3) != console.log(0.1+(0.2+0.3));
Tools for handling this.

toFixed() sets number of decimal places to display, rounds to last indicated
position. returns a string.
parseFloat() string -> floating point number;
parseInt() string -> integer number;
parseInt() treats string with initial 0 as octal by default.
parseInt("021") -> 17.
Can use optional radix to specify what base string is specified in.
parseInt("021",10); -> 21 should always be used when execution environment is
unknown.

Using NaN check to find out if value is number can be very confusing.

typeof NaN -> number;
console.log(NaN === NaN) -> false; ?????????????
isNan("42") -> false;

Double check.
typeof data ==="number" && !isNaN(data);

Data can be parsed before checking.

let x = parseInt(y) then typeof y === "number" && !isNan(y);

Modularity

Namespacing basics
Conflicting code withing multiple js files can cause overwrites.
Simulated namespaces in JS can limit global impact+ provide data protection.
Creating namespace starts by creating global object ("wrapper of the space")

var HOFMASTER =
{
  list:[ ....],
  hof: ....,
  ...
};
HOFMASTER acts as container for names. (Have to be accessed as properties of
HOFMASTER) no risk of names being overriden in global scope.
Nesting namespaces frequent in module pattern.

var HOFMASTER
{
  list: [...],
  hof: ....,
  BIOGRAPHIES: {
    ......
  }
}


HOFMASTER.BIOGRAPHIES....

Anonymous Closures

Modules can have "privatey" properties.

To do this, first wrap entire set of properties in anonymous immediately invoked
function expression. Then turn methods to private executable functions. then
move private values and methods to top of function. Making some properties public,
add them to object, return object.
var ARMORY = (function(
  var weaponList = [... ],
  var armorList = [...],
  var removeWeapon = function(){...};
  var replaceWeapon = function() {...};
  return
  {
  makeWeaponRequest(): function(...) {},
  makeArmorRequest(): function( ... ) {}}
){)(); makeWeaponRequest and makeArmorRequest now publicly accessible.
ARMORY.makeWeaponRequest();
ARMORY.makeArmorRequest();
Global imports

Non local variables reference inside module -> search traverses entire scope
chain, can be very expensive lookup, convoluted namespaces can make scope of
global variables unclear.
Use imports for clearer faster globals inside modules. Protects global from beeing
overwritten.
This can be done by adding a parameter for each desired global variable in
functional wrapper syntax, then using value in call.
(function(x,y,z,...) {


}(xval,yval,zval));

Augmentation
Modules often needs to have additions to existing properties.

Augmentation = process of adding extra properties to existing modules.

E.g.
ARMORY = existing namespace
ARMORY = (function( oldNS ){
var oliBarrels = 1000;
var catapults = ["Stoneslinger","Rockrain","The Giant's Arm"];
oldNS.assignCatapult = function(regiment)
{

}
return oldNS;
}(ARMORY)

Augmented properties do not have access to private properties/values in old
namespace (can only use public interface).
